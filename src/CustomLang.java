/* Generated By:JavaCC: Do not edit this line. CustomLang.java */
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class CustomLang implements CustomLangConstants {
  public static Scanner in;

  public static void main(String args[]) throws ParseException
  {
    try {
      CustomLang parser = null;
      in = new Scanner(System.in);
      if (args.length > 0)
      parser = new CustomLang(new FileInputStream(args[0]));
      else
      {
        System.out.print("Program filename: ");
        parser = new CustomLang(new FileInputStream(in.next()));
       }
      Program p = parser.program();
      p.eval(new Env());
      //p.print();
    }
    catch (FileNotFoundException e)
    {
      System.out.println(e.getMessage());
    }
    catch (RuntimeException e)
    {
      System.out.println(e.getMessage());
    }
  }

  static final public Program program() throws ParseException {
  Program p = new Program(); Reg r = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case IDENTIFIER:
      case 18:
      case 20:
      case 23:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      r = reg();
             p.regList.add(r);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Reg reg() throws ParseException {
  Reg r = new Reg(); Exp e = null; Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                    r.label = token.image;
      jj_consume_token(ASSIGN);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    e = exp();
            r.exp = e;
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp exp() throws ParseException {
  Exp e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      e = literal();
      break;
    case 23:
      e = access();
      break;
    case 18:
      e = derivedExp();
      break;
    case 20:
      e = block();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Literal literal() throws ParseException {
  Literal l = null; String s = null;
    jj_consume_token(INTEGER);
                s = token.image; l = new Int(s);
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp derivedExp() throws ParseException {
  Exp exp1 = null; Exp exp2 = null; Token t = null;
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
      jj_consume_token(READ);
                exp1 = new ReadExp(in);
      break;
    case WRITE:
      jj_consume_token(WRITE);
      exp1 = exp();
                            exp1 = new WriteExp(exp1);
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
                   exp1 = new NewlineExp();
      break;
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                          t = token;
      exp1 = exp();
      exp2 = exp();
                                                                                               exp1 = new ArithExp(t.image, exp1, exp2);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(19);
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  static final public Block block() throws ParseException {
  Block b = new Block(); Reg r = null;
    jj_consume_token(20);
    r = reg();
             b.regList.add(r);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(21);
      r = reg();
                                                 b.regList.add(r);
    }
    jj_consume_token(22);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public Access access() throws ParseException {
  Access a = null; Exp e = null; Access next = null;
    jj_consume_token(23);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                          a = new IdAccess(token.image);
      break;
    case INTEGER:
    case 18:
    case 20:
    case 23:
      e = exp();
                                                                          a = new ExpAccess(e);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(24);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
      next = access();
                                                                                                                          a.next = next;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CustomLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x948400,0x8000,0x940400,0x1e0,0x71e0,0x200000,0x948400,0x800000,};
   }

  /** Constructor with InputStream. */
  public CustomLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CustomLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CustomLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CustomLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CustomLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CustomLang(CustomLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CustomLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
